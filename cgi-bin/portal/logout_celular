#!/usr/bin/perl
#
# serviceValidate_celular
#	Valida un sesión en el portal desde un celular
#
# 2017-05-06. Ernesto - Versión 1.0

$::debug = 0;
($::debug) and print "Content-type:text/plain\n\n";


use strict;
use DBI;
use Template;
use CGI qw/:standard/;
#use utf8;
use CGI::Carp qw/fatalsToBrowser/;
use Net::LDAP;
use MIME::Base64;
use JSON;
use DateTime;
use portal3 qw/dbGet dbUpdate checkFormat/;

sub update_celular($%) ;
sub closeSession($$) ;
sub error($;$) ;

my %msg = (
	0=>"",
	1=>"Se ha producido un error inesperado. Reintente luego", # error de base de datos
	2=>"Su usuario no está habilitado. Comuníquese con Mesa de Ayuda",
	3=>"Ha errado demasiadas veces su contraseña. Debe esperar un minuto antes de reintentar el ingreso",
	4=>"Usuario o contraseña incorrecta",
	10=>"No se puede abrir la sesión en el Portal. Reintente luego",
	20=>"Parámetros incorrectos",
	21=>"Parámetros adicionales incorrectos",
	22=>"Se esperaba entrada en formato JSON",
	23=>"No se puede decodificar la entrada JSON",
	99=>"Error inesperado"
);

if (lc($ENV{CONTENT_TYPE}) ne 'application/json') {
	# No vienen los parámetros como json
	error($msg{22}." y vino ".lc($ENV{CONTENT_TYPE}), 22);
}

my $rinput = eval { decode_json param('POSTDATA') };

if (!defined($rinput->{uuid})) {
	# parámetros incorrectos, no viene el uuid
	error($msg{23}, 23);
}


#
# Obtengo token y perId desde los parámetros
#

my $token = checkFormat($rinput->{token}, '\w+');
my $perId = checkFormat($rinput->{perId}, '\d+');

if (!$token || !$perId) {
	# parámetros incorrectos
	error($msg{20}, 20);
}

#
# Obtengo el resto de los parámetros esperados
#

my %info;
$info{UUID} = checkFormat($rinput->{uuid}, '[\w-]+');
$info{so} = checkFormat($rinput->{so}, '[ ,;._(){}[\]\w-]+');
$info{versionSo} = checkFormat($rinput->{versionSo}, '[ ,;._(){}[\]\w-]+');
$info{marca} = checkFormat($rinput->{marca}, '[ ,;._(){}[\]\w-]+');
$info{modelo} = checkFormat($rinput->{modelo}, '[ ,;._(){}[\]\w-]+');
$info{version} = checkFormat($rinput->{version}, '[ ,;._(){}[\]\w-]+');

if (!$info{UUID} || !$info{so} || !$info{versionSo} || !$info{marca} || !$info{modelo} || !$info{version}) {

	# parámetros incorrectos
	error($msg{21}, 21);
}


#
# Preparo el hash con la salida del script
#

my %salida = (timestamp => DateTime->now(time_zone=>'-0300')->strftime('%Y%m%d%H%M%S'));

#
# Cierro la sesión
#

$salida{status} = closeSession($token, $perId);
if ($salida{status} == 0) {
	# la sesión es válida
	update_celular(2, %info);
}

# Obtengo el texto del mensaje de error si corresponde:
if ($salida{status} > 0) {
	$salida{statusMsg} = $msg{$salida{status}} || 'ERROR';
}

# Convierto el status a numérico:
$salida{status} += 0;

# Genero el HTML final:
print header(-charset=>'utf-8', -type=>'application/json');
print encode_json \%salida;
print "\n";

exit (0);

######################################################################


sub update_celular($%) {
        my($ok,%info) = @_;

	# fijo la TZ en -0300 porque con local me toma el DST aunque para linux no está vigente
        my $fecha = DateTime->now(time_zone=>'-0300')->strftime('%F %H:%M:%S');

	my %valores = (lastClose=>$fecha);

	return dbUpdate($::dbh_portal, "CELULARES", "UUID='$info{UUID}' and so='$info{so}'
			and versionSo='$info{versionSo}' and marca='$info{marca}'
			and modelo='$info{modelo}' and version='$info{version}'", %valores);
}

sub closeSession($$) {
	my ($token, $perId) = @_;

        my ($sec,$min,$hour,$mday,$mon,$year) = localtime(time);
        my $time = sprintf "%02d/%02d/%02d %02d:%02d:%02d",$mday,$mon+1,$year%100,$hour,$min,$sec;

	return dbUpdate($::dbh_portal,
			"SEGSESIONES JOIN SEGUSUARIOS ON SesionesUserId=UserId",
			"SesionesId='$token' and perid='$perId'",
			(SesionesTime=>$time));
}

sub error($;$) {
	my ($texto,$codigo) = @_;

	($codigo) or $codigo=99;

	print header(-charset=>'utf-8', -type=>'application/json');
	print encode_json {status=>$codigo, statusMsg=>$texto};
	print "\n";

	exit(0);
}

{ no warnings 'redefine';
  sub portal3::error($;$) { ::error($_[0],$_[1]); }
}

